extends Node
class_name WebSocketClient

signal connected()
signal connection_failed()
signal disconnected()
signal move_received(pit_index: int)
signal game_state_updated(game_state: Dictionary)
signal game_started(data: Dictionary)
signal game_ended(result: String)
signal reconnecting(attempt: int)
signal player_info_received(data: Dictionary)

var socket := WebSocketPeer.new()
var lobby_id: String = ""
var game_id: String = ""
var player_id: String = ""
var _connected: bool = false

# Reconnection logic
var auto_reconnect := true
var reconnect_attempts := 0
var max_reconnect_attempts := 5
var reconnect_delay := 2.0

func _ready():
	set_process(true)

func _process(_delta: float) -> void:
	socket.poll()
	var state := socket.get_ready_state()

	if state == WebSocketPeer.STATE_OPEN:
		if not _connected:
			_connected = true
			print("‚úÖ WebSocket —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω")
			emit_signal("connected")
		while socket.get_available_packet_count() > 0:
			var msg := socket.get_packet().get_string_from_utf8()
			var parsed = JSON.parse_string(msg)
			if parsed == null:
				print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", msg)
				continue
			if typeof(parsed) != TYPE_DICTIONARY:
				print("‚ö†Ô∏è –û–∂–∏–¥–∞–ª—Å—è —Å–ª–æ–≤–∞—Ä—å, –ø–æ–ª—É—á–µ–Ω–æ:", parsed)
				continue
			_on_message_received(parsed)
	elif state == WebSocketPeer.STATE_CLOSED:
		if _connected:
			_handle_disconnection()

func connect_to_lobby(id: String):
	lobby_id = id
	_connected = false
	reconnect_attempts = 0

	var url = "%s/game/ws/game/%s?token=%s" % [Config.WS_URL, id, Global.user_token]
	if url == "":
		push_error("URL –ø—É—Å—Ç–æ–π!")
		return

	socket = WebSocketPeer.new()
	var err := socket.connect_to_url(url)
	if err != OK:
		push_error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É WebSocket")
		emit_signal("connection_failed")
		return

	print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket:", url)

func _handle_disconnection():
	if connected:
		print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ.")
		_connected = false
		emit_signal("disconnected")
		if auto_reconnect:
			_try_reconnect()

func _try_reconnect():
	if reconnect_attempts < max_reconnect_attempts:
		reconnect_attempts += 1
		print("üîÅ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è #%d" % reconnect_attempts)
		emit_signal("reconnecting", reconnect_attempts)
		await get_tree().create_timer(reconnect_delay).timeout
		connect_to_lobby(lobby_id)
	else:
		print("‚õî –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
		emit_signal("connection_failed")

func is_server_connected() -> bool:
	return socket.get_ready_state() == WebSocketPeer.STATE_OPEN

func send_json(data: Dictionary):
	if is_server_connected():
		var json := JSON.stringify(data)
		socket.send_text(json)
		print("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", json)
	else:
		push_warning("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚Äî –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")

func disconnect_from_server():
	if is_server_connected():
		socket.close()
	_handle_disconnection()

func reconnect():
	if lobby_id != "":
		connect_to_lobby(lobby_id)

func send_move(hole_index: int):
	var move_data := {
		"type": "move",
		"game_id": game_id,
		"player_id": player_id,
		"hole_index": hole_index
	}
	send_json(move_data)

func _on_message_received(data: Dictionary):
	print("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", data)
	if "type" in data:
		print("‚ÑπÔ∏è –ö–ª—é—á 'type' –Ω–∞–π–¥–µ–Ω, –∑–Ω–∞—á–µ–Ω–∏–µ:", data["type"])
	else:
		print("‚ö†Ô∏è –ö–ª—é—á 'type' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
	var message_type = data.get("type", "")
	print("‚ÑπÔ∏è –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (data.get('type', '')):", message_type)
	match message_type:
		"join_ack":
			_connected = true
			print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ.")
			emit_signal("connected")

		"move":
			if data.has("hole_index"):
				print("üéØ –ü–æ–ª—É—á–µ–Ω —Ö–æ–¥:", data["hole_index"])
				emit_signal("move_received", data["hole_index"])

		"game_start":
			print("üéÆ –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã:", data)
			emit_signal("game_started", data)
		
		"player_info":
			print("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –∏–≥—Ä–æ–∫–µ:", data)
			emit_signal("player_info_received", data)  
		
		"end_game":
			var result = data.get("result", "unknown")
			print("üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:", result)
			emit_signal("game_ended", result)

		"state_sync":
			if data.has("game_state"):
				print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:", data["game_state"])
				emit_signal("game_state_updated", data["game_state"])

		_:
			print("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:", data)

# === –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ===

func set_player_info(game: String, player: String):
	game_id = game
	player_id = player

func enable_auto_reconnect(enabled: bool):
	auto_reconnect = enabled
