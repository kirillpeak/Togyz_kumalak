extends Node2D

@onready var username_input = $CanvasLayer/VBoxContainer/UsernameInput
@onready var email_input = $CanvasLayer/VBoxContainer/EmailInput
@onready var password_input = $CanvasLayer/VBoxContainer/PasswordInput
@onready var confirm_password_input = $CanvasLayer/VBoxContainer/ConfirmPasswordInput
@onready var register_button = $CanvasLayer/VBoxContainer/RegisterButton
@onready var back_button = $CanvasLayer/VBoxContainer/BackButton
@onready var error_label = $CanvasLayer/VBoxContainer/ErrorLabel

var server_url = Config.SERVER_URL  # URL –∏–∑ Config.gd

# üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
func _on_RegisterButton_pressed():
	var username = username_input.text.strip_edges()
	var email = email_input.text.strip_edges()
	var password = password_input.text.strip_edges()
	var confirm_password = confirm_password_input.text.strip_edges()

	if username.is_empty() or email.is_empty() or password.is_empty():
		error_label.text = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!"
		return

	if password != confirm_password:
		error_label.text = "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!"
		return

	var http_request = HTTPRequest.new()
	add_child(http_request)
	http_request.request_completed.connect(_on_register_response)

	var url = server_url + "/auth/register"  # <-- –ü—Ä–æ–≤–µ—Ä—å —ç—Ç–æ—Ç –ø—É—Ç—å
	var headers = ["Content-Type: application/json"]
	var body = JSON.stringify({"username": username, "email": email, "password": password})

	print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ", url, " | –î–∞–Ω–Ω—ã–µ: ", body)

	var error = http_request.request(url, headers, HTTPClient.METHOD_POST, body)
	if error != OK:
		print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ", error)

# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
func _on_register_response(_result, response_code, _headers, body):
	print("üîç –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–∫–æ–¥): ", response_code)
	print("üìú –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ", body.get_string_from_utf8())

	if response_code == 200:
		print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
		_attempt_login(email_input.text, password_input.text)
	else:
		error_label.text = "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª: " + body.get_string_from_utf8()

func _attempt_login(email: String, password: String):
	var http_request = HTTPRequest.new()
	add_child(http_request)
	http_request.request_completed.connect(_on_login_response)
	var url = server_url + "/auth/login"
	var headers = ["Content-Type: application/json"]
	var body = JSON.stringify({"email": email, "password": password})

	print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤—Ö–æ–¥–∞: ", url, " | –î–∞–Ω–Ω—ã–µ: ", body)

	var error = http_request.request(url, headers, HTTPClient.METHOD_POST, body)
	if error != OK:
		print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤—Ö–æ–¥–∞: ", error)

func _on_login_response(_result, response_code, _headers, body):
	if response_code == 200:
		var response = JSON.parse_string(body.get_string_from_utf8())
		if response and "access_token" in response:
			Global.user_token = response["access_token"]
			Global.is_logged_in = true
			print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–æ–∫–µ–Ω: ", Global.user_token)
			Global.save_auth_data()
			get_tree().change_scene_to_file("res://scenes/main.tscn")
		else:
			error_label.text = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞!"
	else:
		error_label.text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å!"

func _on_back_button_pressed() -> void:
	get_tree().change_scene_to_file("res://scenes/AuthScene.tscn") 
