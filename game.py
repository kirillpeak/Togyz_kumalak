from fastapi import APIRouter, WebSocket, WebSocketDisconnect, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from database import get_db
from models import ActiveGame,User
from schemas import GameCreate, GameMove, GameResponse
from typing import Dict, List
from auth import get_current_user
from fastapi import Query
import uuid

router = APIRouter()  

# –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã
active_games: Dict[str, Dict[str, WebSocket]] = {}

# üìå –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã
@router.post("/create")
async def create_game(db: AsyncSession = Depends(get_db), user: User = Depends(get_current_user)):
    new_game = ActiveGame(player1_id=str(user.user_id), current_state={})  # UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.add(new_game)
    await db.commit()
    await db.refresh(new_game)
    return {"game_id": str(new_game.game_id)}

# üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä
@router.get("/list", response_model=List[GameResponse])
async def list_games(db: AsyncSession = Depends(get_db)):
    print("–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∏–≥—Ä")
    
    try:
        result = await db.execute(select(ActiveGame))
        games = result.scalars().all()
        print("–ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä: ", len(games))
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä:", str(e))
        games = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º games –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º
    
    return [
        {
            "game_id": str(game.game_id),
            "owner": str(game.player1_id),
            "players": [str(game.player1_id)] + ([str(game.player2_id)] if game.player2_id else [])
        }
        for game in games
    ]

# üìå –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ
@router.post("/join/{game_id}")
async def join_game(
    game_id: str, 
    db: AsyncSession = Depends(get_db),
    user: User = Depends(get_current_user)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
):
    game = await db.get(ActiveGame, uuid.UUID(game_id))
    if not game:
        raise HTTPException(status_code=404, detail="–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    if game.player2_id:
        raise HTTPException(status_code=400, detail="–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    game.player2_id = str(user.user_id)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ user.id —É–∂–µ UUID
    await db.commit()
    return {"game_id": game_id, "player2_id": game.player2_id}

# üìå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã
@router.websocket("/ws/game")
async def game_websocket(websocket: WebSocket, game_id: str, player_id: str, token: str):
    print(f"‚ñ∂ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: game_id={game_id}, player_id={player_id}, token={token[:10]}...")
    try:
        user = await get_current_user(token)
        if not user:
            await websocket.close()
            print("WebSocket –Ω–µ–ø–æ–¥–∫–ª—é—á–µ–Ω")
            return

        await websocket.accept()
        print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
        if game_id not in active_games:
            active_games[game_id] = {}

        active_games[game_id][player_id] = websocket
        print(f"‚úÖ –ò–≥—Ä–æ–∫ {player_id} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∏–≥—Ä–µ {game_id}")

        try:
            while True:
                data = await websocket.receive_json()
                print(f"üì© –ü–æ–ª—É—á–µ–Ω —Ö–æ–¥: {data}")  # üëà –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

                game_state = await process_move(game_id, data["player_id"], data["hole_index"], db)
                
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π game_state: {game_state}")

                for player_ws in active_games[game_id].values():
                    await player_ws.send_json({"game_state": game_state})

        except WebSocketDisconnect:
            print(f"‚ö†Ô∏è –ò–≥—Ä–æ–∫ {player_id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –∏–≥—Ä—ã {game_id}")
            del active_games[game_id][player_id]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    

async def process_move(game_id: str, player_id: str, hole_index: int, db: AsyncSession):
    game = await db.get(ActiveGame, uuid.UUID(game_id))
    if not game:
        return {"error": "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    if not game.current_state:
        game.current_state = {
            "board": [9] * 18,
            "kazans": [0, 0],
            "current_player": 0,
            "tuzdyk": [-1, -1],
            "winner": -1
        }

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É —Ö–æ–¥–∞
    state = game.current_state
    success = handle_move(state, player_id, hole_index)
    
    if not success:
        return {"error": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ö–æ–¥"}

    game.current_state = state
    await db.commit()
    
    return game.current_state

def handle_move(state, player_id, hole_index):
    try:
        player = 0 if player_id == str(state["players"][0]) else 1
        index = hole_index + (9 * player)
        
        if state["board"][index] == 0:
            return False

        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫–∞–º–Ω–µ–π
        stones = state["board"][index]
        state["board"][index] = 0
        
        current_index = index
        while stones > 0:
            current_index = (current_index + 1) % 18
            if current_index in [8, 17]:  # –ü—Ä–æ–ø—É—Å–∫ –∫–∞–∑–∞–Ω–æ–≤
                continue
            
            state["board"][current_index] += 1
            stones -= 1

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–º–Ω–µ–π
        if state["board"][current_index] % 2 == 0:
            state["kazans"][player] += state["board"][current_index]
            state["board"][current_index] = 0

        # –°–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–∞
        state["current_player"] = 1 - player
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ö–æ–¥–∞: {str(e)}")
        return False
