from fastapi import APIRouter, WebSocket, WebSocketDisconnect, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from database import get_db
from models import ActiveGame, User
from schemas import GameCreate, GameMove, GameResponse
from typing import Dict, List
from auth import get_current_user, get_user_from_token
from fastapi import Query
import uuid

router = APIRouter()

# –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã
active_games: Dict[str, Dict[str, WebSocket]] = {}

# üìå –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã
@router.post("/create")
async def create_game(db: AsyncSession = Depends(get_db), user: User = Depends(get_current_user)):
    existing_game = await db.execute(select(ActiveGame).where(ActiveGame.player1_id == str(user.user_id)))
    if existing_game.scalars().first():
        raise HTTPException(status_code=400, detail="–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –∏–≥—Ä—É")
    new_game = ActiveGame(player1_id=str(user.user_id), current_state={})
    db.add(new_game)
    await db.commit()
    await db.refresh(new_game)
    return {"game_id": str(new_game.game_id), "player1_id": str(new_game.player1_id)}

# üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä
@router.get("/list", response_model=List[GameResponse])
async def list_games(db: AsyncSession = Depends(get_db)):
    print("–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∏–≥—Ä")
    
    try:
        result = await db.execute(select(ActiveGame))
        games = result.scalars().all()
        print("–ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä: ", len(games))
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä:", str(e))
        games = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º games –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º
    
    return [
        {
            "game_id": str(game.game_id),
            "owner": str(game.player1_id),
            "players": [str(game.player1_id)] + ([str(game.player2_id)] if game.player2_id else [])
        }
        for game in games
    ]

# üìå –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ
@router.post("/join/{game_id}")
async def join_game(
    game_id: str, 
    db: AsyncSession = Depends(get_db),
    user: User = Depends(get_current_user)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
):
    try:
        game_uuid = uuid.UUID(game_id)
    except ValueError:
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UUID –∏–≥—Ä—ã")

    game = await db.get(ActiveGame, game_uuid)
    if not game:
        raise HTTPException(status_code=404, detail="–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    if game.player2_id:
        raise HTTPException(status_code=400, detail="–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    game.player2_id = str(user.user_id)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ user.id —É–∂–µ UUID
    await db.commit()
    return {"game_id": game_id, "player2_id": game.player2_id}

async def get_game_from_db(game_id: str, db: AsyncSession = Depends(get_db)):
    query = await db.execute(select(ActiveGame).where(ActiveGame.game_id == game_id))
    game = query.scalar_one_or_none()
    return game

# üìå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã
@router.websocket("/ws/game/{game_id}")
async def game_websocket(websocket: WebSocket, game_id: str, token: str, db: AsyncSession = Depends(get_db)):
    try:
        print("üîß WebSocket –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω")
        token = websocket.query_params.get("token")
        print(f" token = {token }")
        user = await get_user_from_token(token, db)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}")
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
            await websocket.close(code=1008)
            return

        await websocket.accept()
        print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ {user.username} –∫ –∏–≥—Ä–µ {game_id}")

        if game_id not in active_games:
            active_games[game_id] = {}
        active_games[game_id][str(user.user_id)] = websocket

        game = await get_game_from_db(game_id, db)
        if not game:
            print(f"‚ùå –ò–≥—Ä–∞ {game_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await websocket.close(code=1008)
            return

        player1_query = await db.execute(select(User).where(User.user_id == game.player1_id))
        player1 = player1_query.scalar_one()
        player2_query = await db.execute(select(User).where(User.user_id == game.player2_id))
        player2 = player2_query.scalar_one_or_none()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∏–≥—Ä–æ–∫–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        player_info_message = {
            "type": "player_info",
            "player": {"id": str(user.user_id), "username": user.username},
            "game_id": game_id
        }
        await websocket.send_json(player_info_message)
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ player_info –¥–ª—è {user.username}")
        
        if len(active_games[game_id]) == 2:
            game_state = await get_game_state(game_id, db)
            game_start_message = {
                "type": "game_start",
                "player1": {"id": str(player1.user_id), "username": player1.username},
                "player2": {"id": str(player2.user_id) if player2 else None, "username": player2.username if player2 else None},
                "game_id": game_id,
                "game_state": game_state
            }
            for player_ws in active_games[game_id].values():
                await player_ws.send_json(game_start_message)
            print("üéÆ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ game_start –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º")
        else:
            await websocket.send_json({"message": "–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞"})
        
        try:
            while True:
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç {user.user_id}")
                data = await websocket.receive_json()
                print(f"üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")
                if "hole_index" in data:  # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω —Ö–æ–¥ –æ—Ç –∏–≥—Ä–æ–∫–∞
                    game_state = await process_move(game_id, user.user_id, data["hole_index"], db)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π state –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
                    for player_ws in active_games[game_id].values():
                        await player_ws.send_json({"game_state": game_state})

                elif data.get("type") == "start_game":  # –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è
                    game_state = await start_game(game_id, db)
                    for player_ws in active_games[game_id].values():
                        await player_ws.send_json({"game_state": game_state, "message": "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å"})

                elif data.get("type") == "end_game":  # –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è
                    game_state = await end_game(game_id, db)
                    for player_ws in active_games[game_id].values():
                        await player_ws.send_json({"game_state": game_state, "message": "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"})

        except WebSocketDisconnect:
            for ws in active_games[game_id].values():
               await ws.send_json({"type": "opponent_disconnected"})
            del active_games[game_id][str(user.user_id)]
            if not active_games[game_id]:  # –ï—Å–ª–∏ –∏–≥—Ä–∞ –ø—É—Å—Ç–∞—è, —É–¥–∞–ª–∏—Ç—å –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                del active_games[game_id]

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")


# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞
async def process_move(game_id: str, player_id: str, hole_index: int, db: AsyncSession):
    game = await db.get(ActiveGame, uuid.UUID(game_id))
    if not game:
        raise HTTPException(status_code=404, detail="–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ö–æ–¥–∞
    game.current_state["last_move"] = {"player_id": player_id, "hole_index": hole_index}
    await db.commit()
    return game.current_state

# üìå –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
async def start_game(game_id: str, db: AsyncSession):
    game = await db.get(ActiveGame, uuid.UUID(game_id))
    if not game:
        raise HTTPException(status_code=404, detail="–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    game.current_state["started"] = True
    await db.commit()
    return game.current_state

# üìå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
async def end_game(game_id: str, db: AsyncSession):
    game = await db.get(ActiveGame, uuid.UUID(game_id))
    if not game:
        raise HTTPException(status_code=404, detail="–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
    game.current_state["ended"] = True
    await db.commit()
    return game.current_state

# üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
async def get_game_state(game_id: str, db: AsyncSession):
    game = await db.get(ActiveGame, uuid.UUID(game_id))
    if not game:
        raise HTTPException(status_code=404, detail="–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return game.current_state

    

